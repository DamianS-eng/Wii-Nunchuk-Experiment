// Libraries
#include <NintendoExtensionCtrl.h>
#include "HID-Project.h"

//Pinout
const int pinLed = LED_BUILTIN;
const int resetButton = 2;

// Joystick
int Joyx-Max = 0, Joyx+Max = 0, Joyy-Min = 0, Joyy-Max = 0;
const int JoyDeadzone = 50;  // +/- area around the center to ignore

ExtensionPort controller;

// Program Data
uint8_t xCenter = 0;
uint8_t yCenter = 0;
boolean weaponSwitched = false;
boolean upLeft = true;
uint8_t buttonArray[32] = {
    "c",
    "z",
    "0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"
};

void setup() {
  
  pinMode(pinLed, OUTPUT);
  pinMode(resetButton, INPUT_PULLUP);

  // Sends a clean report to the host. This is important on any Arduino type.
  Gamepad.begin();
    
  //What clock rate is needed?
  controller.i2c().setClock(400000);
   
  while (!controller.connect()) {
	//wait for connection...
	delay(1000);
	}

  xCenter = controller.joyX();
  yCenter = controller.joyY();

	controller.begin();
	controller.connect();

	ExtensionType conType = controller.getControllerType();

	switch (conType) {
		case(ExtensionType::NoController):
			//No controller detected
			break;
		case(ExtensionType::UnknownController):
			//Unknown controller connected
			break;
		case(ExtensionType::Nunchuk):
			//Nunchuk connected!
			break;
		case(ExtensionType::ClassicController):
			//Classic Controller connected!
			break;
		case(ExtensionType::GuitarController):
			//Guitar controller connected!
			break;
		case(ExtensionType::DrumController):
			//Drum set controller connected!
			break;
		case(ExtensionType::DJTurntableController):
			//DJ turntable connected!
			break;
		case(ExtensionType::uDrawTablet):
			//uDraw Tablet connected!
			break;
		case(ExtensionType::DrawsomeTablet):
			//Drawsome Tablet connected!
			break;
		default: break;
	}

}

void reset() {
    digitalWrite(pinLed, HIGH);
    Gamepad.releaseAll();
    delay(1000);
    digitalWrite(pinLed, LOW);
}

int16_t maxRange(int16_t inputRange, int16_t farthest) {
    if (inputRange > farthest) {
        return inputRange;
    }
    return farthest;
}

void loop() {
    if (digitalRead(resetButton)) {
        reset();
    }
    if (controller.update()) {
        // move
        //note to check for range, then set xAxis to proportion of farthest reported ranges
        Gamepad.xAxis(controller.joyX());
        Gamepad.yAxis(controller.joyY());

       //  press button
    
        controller.buttonZ() ? Gamepad.press(1) : Gamepad.release(1);
        controller.buttonC() ? Gamepad.press(2) : Gamepad.release(2);
    }
    Gamepad.write();
}